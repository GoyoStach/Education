'use-client';

import { Timeline } from 'flowbite-react';

import { EducationEvent } from 'types/types';
import Head from 'next/head';
import { Inter } from '@next/font/google';

import { NextPage } from 'next';
import { Separator } from '@/components/ui/separator';
import clsx from 'clsx';
import education from 'data/education';
import { NavigationMenu } from '@/components/NavigationMenu';
import { useState, useEffect } from 'react';

const inter = Inter({ subsets: ['latin'] });

const data: EducationEvent[] = education;

const Home: NextPage = () => {
  const [themeColor, setThemeColor] = useState('dark');
  useEffect(() => {
    // On page load or when changing themes, best to add inline in `head` to avoid FOUC

    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      setThemeColor('dark');
    } else {
      setThemeColor('');
    }
  }, [themeColor]);

  return (
    <div className={clsx(themeColor)}>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      <div
        className={clsx(
          'flex min-h-screen flex-col items-center justify-center bg-rosePineDawn-base dark:bg-rosePineMoon-base',
        )}
      >
        <NavigationMenu />
        <section
          className={clsx(
            'prose prose-zinc flex flex-col  dark:prose-invert',
            'lg:col-span-1 lg:h-full lg:w-full lg:prose-xl',
          )}
        >
          <h1 className="flex items-center justify-center pt-5 !text-rosePineDawn-text dark:!text-rosePineMoon-text">
            Goyo Education
          </h1>

          <Separator />
          <Timeline className="m-10 flex flex-col items-center">
            {data.map(event => {
              return (
                <Timeline.Item key={event.id}>
                  <Timeline.Point className="[&>*]:!bg-rosePineDawn-subtle dark:[&>*]:!bg-rosePineMoon-subtle " />
                  <Timeline.Content>
                    <Timeline.Time className="!text-rosePineDawn-subtle dark:!text-rosePineMoon-subtle">
                      {event.time}
                    </Timeline.Time>
                    <img
                      src={event.img}
                      className="h-24 bg-white p-2"
                      alt={`${event.title}-experience-image`}
                    />
                    <Timeline.Title className="!text-rosePineDawn-text dark:!text-rosePineMoon-text">
                      {event.title}
                    </Timeline.Title>
                    <Timeline.Body className="whitespace-pre-line !text-rosePineDawn-foam dark:!text-rosePineMoon-foam">
                      {event.content}
                    </Timeline.Body>
                  </Timeline.Content>
                </Timeline.Item>
              );
            })}
          </Timeline>
          <div>
            <Separator />
            Footer to be declared here
          </div>
        </section>
      </div>
    </div>
  );
};

export default Home;
